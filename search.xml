<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Streamsets POC总结</title>
    <url>/2021/06/17/POC%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Streamsets介绍</p>
<p>Streamsets是一款大数据实时采集和ETL工具，可以实现不写一行代码完成数据的采集和流转。通过拖拽式的可视化界面，实现数据管道(Pipelines)的设计和定时任务调度。最大的特点有：</p>
<p>(1) 可视化界面操作，不写代码完成数据的采集和流转;</p>
<p>(2) 内置监控，可是实时查看数据流传输的基本信息和数据的质量;</p>
<p>(3) 强大的整合力，对现有常用组件全力支持，包括50种数据源、44种数据操作、46种目的地。</p>
<p>对于Streamsets来说，最重要的概念就是数据源(Origins)、操作(Processors)、目的地(Destinations)，创建一个Pipelines管道配置也基本是这三个方面，除此之外还有执行器(executor)，是做一些数据处理操作的。</p>
<p>常见的Origins有Kafka、HTTP、UDP、JDBC、HDFS等；Processors可以实现对每个字段的过滤、更改、编码、聚合等操作；Destinations跟Origins差不多，可以写入Kafka、Flume、JDBC、HDFS、Redis等。</p>
<p>POC 需求</p>
<p>实现一个工作流程：</p>
<p>1.对一个数据库中的所需要的表进行增量的抽取，从数据库到分布式文件系统上，比如从postgresql到hive上；</p>
<p>2.有业务需求的抽取，因为数据库表中的修改时间字段不会跟随修改的数据而更新，所以需要在每次增量的抽取上次抽取时间点之前时间的数据（比如前3个月）；</p>
<p>3.要能自动判断hive上是否存在该表，根据情况进行创建，之后进行数据载入；</p>
<p>POC结果</p>
<p>最后的实现方案是：</p>
<p>   通过airflow调度streamsets的restapi实现pipeline的开启以及一些数据的获取和pipline的状态判断，筛选条件offset的设置，实现整个sdc的etl 流程，不过最后发现该实现方案存在较大的缺陷，而且还有一个时间变量的设置存在问题；</p>
<p>streamsets的案例是: 全量抽取pipeline<a href="http://10.2.29.102:9230/collector/pipeline/streamsettest03byquerycopy57a756ec-6d71-4640-9fd9-40e4ce24eb46；" target="_blank" rel="noopener">http://10.2.29.102:9230/collector/pipeline/streamsettest03byquerycopy57a756ec-6d71-4640-9fd9-40e4ce24eb46；</a></p>
<p>以及增量pipeline<a href="http://10.2.29.102:9230/collector/pipeline/streamsettest03byqueryincr6ce53b23-cb23-455e-b3f5-8921a1d93afa；" target="_blank" rel="noopener">http://10.2.29.102:9230/collector/pipeline/streamsettest03byqueryincr6ce53b23-cb23-455e-b3f5-8921a1d93afa；</a></p>
<p>全量</p>
<p>增量<br>airflow调度脚本案例是：<a href="http://10.2.29.102:9210/admin/airflow/code?dag_id=test_my_http；" target="_blank" rel="noopener">http://10.2.29.102:9210/admin/airflow/code?dag_id=test_my_http；</a></p>
<p>airflow调度<br>总结</p>
<p>优点</p>
<pre><code>1.使用拖拽的方式减少了手动etl各种繁琐的代码编写，并且实时即开即用，可以实现UI界面的etl的简单操作，运行时候的可视化界面可以了解数据载入的各个过程情况，并且有rest的api可以实现其他进程的调用，比如调度程序airflow的调度，实现定时任务自动化etl，减少每次人工操作的繁琐，实现自动化智能化，适合大数据下的使用；
</code></pre><p>缺点</p>
<p>1.因为设计的时候是定制普通的etl，某些根据业务要求的etl无法实现，比如本次poc中的案例，还有pipeline 之间的依赖，包括restapi在airflow调度后的异步问题导致的etl流程顺序紊乱 ，比如本例中的conditional_task1根据实际情况进行判断，假如全量抽取之前不存在的话，会调用SimpleHttpOperator进行一次全量的抽取，但是通过restapi返回的response并不是pipeline执行完成后才返回的，执行表明已经调用成功，但是运行的状态未知，这样可能在load_crm_goods_full还没跑完的情况下（数据量大的情况下），conditional_task2开始执行，去拿load_crm_goods_full对应的pipeline的id的offset去对增量表的offset进行设置，有可能导致拿不到的结果，而导致整个etl流程失败；除此之外，run_hive_query对2表的数据进行合并的时候要拿到一个判断值去进行表的数据merge,是根据上一个job,load_crm_goods_incr的offset来取值的，但是load_crm_goods_incr要根据reset_crm_goods1，reset_crm_goods2的其中一个结果来决定，所以在定义sql的时候需要动态定义时间的值，这在整个airflow脚本中是很难实现的，暂时没有想到解决的方案。</p>
]]></content>
      <categories>
        <category>数据开发</category>
      </categories>
      <tags>
        <tag>etl</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/06/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>数据开发</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hive跨集群迁移表</title>
    <url>/2021/06/17/hive%E8%B7%A8%E9%9B%86%E7%BE%A4%E8%BF%81%E7%A7%BB%E8%A1%A8/</url>
    <content><![CDATA[<p>1.export table xxx to ‘/tmp/xxxx’;</p>
<p>2.hadoop fs - get /tmp/xxx /tmp/xxx</p>
<p>3.scp文件。。。</p>
<p>4.zip -r /tmp/xxxx.zip /tmp/xxx</p>
<p>5.unzip xxx.zip /tmp/</p>
<p>6.hadoop fs -put /tmp/xxxx /tmp/xxxx</p>
<p>7.import table xxx from ‘/tmp/xxx’__</p>
]]></content>
      <categories>
        <category>数据开发</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>java实现多线程的6种方式</title>
    <url>/2021/06/17/java%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%846%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>java实现多线程基本上有5种办法，第一继承Thread类，重写run方法；第二实现继承Runnable接口，重写run方法；第三种是基于内部类的写法，同样重写run方法，实际上和前2种本质一样；第四种，基于带返回值的线程实现方式；第五种，基于线程池的方式；第六种，基于定时任务实现的多线程。</p>
<p>####1.基于继承Thread类的实现</p>
<blockquote>
<pre><code>/**
* @Author: Cyy
* @Description: 使用继承Thread实现线程的方式
* @Date:Created in 23:33 2018/7/27
*/
public class Thread01 extends Thread {

@Override
 public void run() {
    super.run();
    System.out.println(&quot;使用继承Thread实现线程的方式。。。&quot;);
    int i=0;
    while (true) {

        System.out.println(Thread.currentThread().getName()+&quot; is Running....&quot;);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException  e) {
            e.printStackTrace();
        }
    }
}

public Thread01(String name){
    super(name);
}
public static void main(String[] args) {
    Thread01 thread_1=new Thread01(&quot;t1&quot;);
    Thread01 thread_2=new Thread01(&quot;t2&quot;);
    thread_1.start();
    thread_2.start();
    while (true) {
            System.out.println(Thread.currentThread().getName()+&quot; is Running....&quot;);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException  e) {
            e.printStackTrace();
        }
    }
 }
}
</code></pre><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/10224563-88d736905e9966c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</blockquote>
<p>####2.基于实现Runnable接口的实现</p>
<blockquote>
<pre><code>/**
* @Author: Cyy
* @Description:基于实现Runnable接口的实现
* @Date:Created in 23:46 2018/7/27
*/
public class Thread02 implements Runnable {
@Override
public void run() {
    System.out.println(&quot;使用实现Runnable实现线程的方式。。。&quot;);
    while(true){
            System.out.println(Thread.currentThread().getName()+&quot; is Running....&quot;);
        try{
            Thread.sleep(1000);
        }catch (InterruptedException  e){
            e.printStackTrace();
        }
    }
}
public static void main(String[] args) {
    Thread02 thread01=new Thread02();
    Thread02 thread02=new Thread02();
    Thread thread1=new Thread(thread01,&quot;t1&quot;);
    thread1.start();
    Thread thread2=new Thread(thread02,&quot;t2&quot;);
    thread2.start();
    while (true) {
        System.out.println(Thread.currentThread().getName()+&quot; is Running....&quot;);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException  e) {
            e.printStackTrace();
        }
    }
  }
 }
</code></pre><p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/10224563-f166fcf2937e4e63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</blockquote>
<p>####3.基于内部类的实现</p>
<blockquote>
<pre><code>public class Thread00 {

    public static void main(String[] args) {

        //基于子类的实现
        new Thread(&quot;t_t&quot;){
            @Override
            public void run() {
                super.run();
                while (true) {
                    System.out.println(Thread.currentThread().getName()+&quot; is Running....&quot;);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }.start();

        //基于接口的实现
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    System.out.println(Thread.currentThread().getName()+&quot; is Running....&quot;);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        },&quot;t_r&quot;){}.start();

        while (true) {
                System.out.println(Thread.currentThread().getName() + &quot; is Running...&quot;);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre></blockquote>
<p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/10224563-4551d8c4def647f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>另外，还有同时实现基于子类和接口的实现的情况：</p>
<blockquote>
<pre><code>/**
 * @Author: Cyy
 * @Description: 同时基于子类和内部类
 * @Date:Created in 10:11 2018/7/28
 */
public class Thread03 {

    public static void main(String args[]){
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    System.out.println(&quot;Runnable is running...&quot;);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }){
            @Override
            public void run() {
//                super.run();
                while (true) {
                    System.out.println(&quot;sub is running...&quot;);
                    try {
                            Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }.start();

    }
}
</code></pre></blockquote>
<p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/10224563-61a1e5b9bb26d736.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>这里运行结果只有子类线程的打印，原因是虽然实现了Thread类构造办法里Runnable接口的实例，但是子类已经将父类的run方法进行重写了，所以只会执行子类的办法。</p>
<p>####4.基于带返回值的线程实现方式</p>
<blockquote>
<pre><code>import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

/**
 * @Author: Cyy
 * @Description:
 * @Date:Created in 10:35 2018/7/28
 */
public class Thread04 {

    public static void main(String args[]) throws ExecutionException, InterruptedException {
        Callable&lt;Integer&gt; call=new Callable&lt;Integer&gt;() {
            @Override
            public Integer call() throws Exception {
                System.out.println(&quot;thread start...&quot;);
                Thread.sleep(2000);
                return 520;
            }
        };

        FutureTask&lt;Integer&gt; task=new FutureTask&lt;&gt;(call);
        Thread t=new Thread(task);
        t.start();
        System.out.println(&quot;线程的执行结果 &quot;+task.get());

    }
}
</code></pre></blockquote>
<p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/10224563-13077b7fb6481123.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>####5.基于线程池的方式。</p>
<blockquote>
<pre><code>import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * @Author: Cyy
 * @Description:
 * @Date:Created in 13:02 2018/7/28
 */
public class Thread05 {

    public static void main(String[] args) {

        ExecutorService threadPool= Executors.newFixedThreadPool(5);

        while (true) {
            threadPool.execute(new Runnable() {
                @Override
                public void run() {
                    System.out.println(Thread.currentThread().getName() + &quot; is running...&quot;);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            });
        }
    }
}
</code></pre></blockquote>
<p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/10224563-2133e7d7e0cd6a0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ul>
<li>可以基于ExecutorService、Callable、Future实现有返回结果的多线程。</li>
</ul>
<blockquote>
<pre><code>import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.*;

/**
 * @Author: Cyy
 * @Description:
 * @Date:Created in 13:16 2018/7/28
 */
public class Thread06 {

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        System.out.println(&quot;----程序开始运行-----&quot;);

        Date date1=new Date();
        int taskSize=5;

        ExecutorService threadPool= Executors.newFixedThreadPool(taskSize);
        List&lt;Future&gt; list=new ArrayList&lt;Future&gt;();
        for (int i=0;i&lt;taskSize;i++) {
            Callable c=new Callable() {
                @Override
                public Object call() throws Exception {
                    Date dateTmp1 = new Date();
                    Thread.sleep(2000);
                    Date dateTmp2 = new Date();
                    long time = dateTmp2.getTime() - dateTmp1.getTime();
                    return time;
                }
            };
            Future f = threadPool.submit(c);
            list.add(f);
        }
        threadPool.shutdown();
        for (Future f : list) {
            System.out.println(&quot;&gt;&gt;&gt;&quot;+f.get().toString());
        }
        Date date2=new Date();
        System.out.println(&quot;-----程序结束运行-----，程序运行时间【&quot;+(date2.getTime()-date1.getTime())+&quot;毫秒】&quot;);
    }
}
</code></pre></blockquote>
<p>运行结果：<br><img src="https://upload-images.jianshu.io/upload_images/10224563-77c92e58f3e72d7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>####6.基于定时任务实现的多线程</p>
<blockquote>
<pre><code>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

/**
 * @Author: Cyy
 * @Description:
 * @Date:Created in 16:43 2018/7/28
 */
public class Thread07 {

    private static final SimpleDateFormat format=new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);

    //定时任务
    public static void timeLapse() throws ParseException {
        new Timer().schedule(new TimerTask() {
            @Override
            public void run() {
                System.out.println(&quot;定时任务开始执行。。。。。&quot;);
            }
        },format.parse(&quot;2018-07-28 16:51:00&quot;));

    }
    public static void timeLapseBySomeTimes(){
        new Timer().schedule(new TimerTask() {
            @Override
            public void run() {
                System.out.println(Thread.currentThread().getName()+&quot; is Running...&quot;);
            }
        },new Date(),1000);
    }
    public static void main(String[] args) throws ParseException {
//        timeLapse();
        timeLapseBySomeTimes();
        timeLapseBySomeTimes();
        while (true) {
            System.out.println(Thread.currentThread().getName() + &quot; is Running...&quot;);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre></blockquote>
<p>运行结果：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10224563-a872cc0e4d4c4047.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
